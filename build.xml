<project name="Replayer" default="dist" xmlns:fx="javafx:com.sun.javafx.tools.ant">
	<property file="version.properties" />
	<property name="project.version" value="${ext.antProjectVersion}"/>
	<!-- remove quotes from version -->
	<script language="javascript">
		var before = project.getProperty("project.version");
		project.setProperty("project.version", before.replaceAll("\"", ""));
	</script>
	<property environment="env"/>
	<property name="dir.javafx" value="${env.JAVA_HOME}/jre/lib" />
	<property name="jar.javafx" value="${dir.javafx}/jfxrt.jar" />
	<property name="jar.ant-javafx" value="${env.JAVA_HOME}/lib/ant-javafx.jar" />
	<property name="dir.build" value="build/classes/main" />
	<property name="dir.src" value="src/main/java" />
	<property name="dir.lib" value="lib" />
	<property name="dir.res" value="src/main/resources" />
	<property name="dir.dist" value="build/dist" />
	<property name="dir.dist.res" value="dist" />
	<property name="dir.javadoc" value="build/javadoc" />
	<property name="dir.clean" value="build" />
	<property name="dir.gen" value="com/paradoxplaza/eu4/replayer/generator" />
	<property name="file.javadoc.overview" value="src/overview.html" />
	<property name="file.dist" value="replayer.jar" />
	<property name="file.dist.zip" value="replayer-${project.version}.zip" />
	<property name="file.readme" value="README.txt" />
	<property name="class.main" value="com.paradoxplaza.eu4.replayer.gui.Replayer" />
	<!-- testing properties -->
	<property name="dir.test.src" value="src/test/java" />
	<property name="dir.test.reports" value="build/reports" />

	<path id="path.javafx" >
		<filelist dir="${dir.javafx}/jre/lib"
			files="jfxrt.jar" />
	</path>

	<path id="path.lib">
		<path refid="path.javafx"/>
		<filelist files="${jar.javafx}" />
		<fileset dir="${dir.lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="init">
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.dist}" />
		<mkdir dir="${dir.test.reports}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${dir.src}" destdir="${dir.build}" debug="true"
				includeantruntime="false" classpathref="path.lib">
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
		<copy todir="${dir.build}">
			<fileset dir="${dir.res}">
				<exclude name="**/generator/*"/>
			</fileset>
		</copy>
		<zip destFile="${dir.build}/${dir.gen}/mod.zip"
				basedir="${dir.res}/${dir.gen}"/>
	</target>

	<taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
		uri="javafx:com.sun.javafx.tools.ant"
		classpath="${jar.ant-javafx}"/>

	<target name="dist" depends="compile">
		<unjar dest="${dir.build}" overwrite="false">
			<patternset>
				<include name="**/*.*"/>
				<exclude name="**/Test*"/>
				<exclude name="**/META-INF/**"/>
				<exclude name="**/build.properties"/>
			</patternset>
			<fileset dir="${dir.lib}">
				<include name="**/*.jar"/>
				<exclude name="**/*junit*"/>
				<exclude name="**/*sources*"/>
				<exclude name="**/*javadoc*"/>
			</fileset>
		</unjar>
		<fx:jar destfile="${dir.dist}/${file.dist}">
			<!-- Details about application -->
			<fx:application name="Replayer" mainClass="${class.main}"/>

			<!-- Define what auxilary resources are needed -->
			<fx:resources>
				<fx:fileset dir="${dir.lib}" includes="*.jar"/>
			</fx:resources>

			<!-- What to include into result jar file?
				 Everything in the build tree -->
			<fileset dir="${dir.build}" excludes="**/*Test*.class" />

			<!-- Customize jar manifest (optional) -->
			<manifest>
				<attribute name="Implementation-Title" value="EU4 Replayer"/>
				<attribute name="Implementation-Version" value="${project.version}"/>
				<attribute name="Implementation-Vendor" value="PreXident"/>
				<attribute name="JavaFX-Feature-Proxy" value="None"/> <!-- this does not seem to work :-/ -->
				<!--<attribute name="SplashScreen-Image" value="splash/splash.gif"/>-->
			</manifest>
		</fx:jar>
		<copy todir="${dir.dist}">
			<fileset dir="${dir.dist.res}" />
			<file file="${file.readme}" />
		</copy>
		<zip destFile="${dir.dist}/${file.dist.zip}"
				basedir="${dir.dist}" excludes="**/*.zip"/>
	</target>

	<target name="run" depends="dist">
		<java fork="true" jar="${dir.dist}/${file.dist}" dir="${dir.dist}">
			<jvmarg line="-Djavafx.autoproxy.disable=true"/>
			<jvmarg line="-Xms1024m"/>
			<jvmarg line="-Xmx1024m"/>
		</java>
	</target>

	<target name="javadoc">
		<javadoc overview="${file.javadoc.overview}" sourcepath="${dir.src}"
			destdir="${dir.javadoc}" classpathref="path.lib" access="private" />
	</target>

	<target name="clean">
		<delete dir="${dir.clean}"/>
	</target>

	<!-- testing targets -->
	<path id="path.test">
		<pathelement location="${dir.build}" />
		<path refid="path.lib"/>
	</path>

	<path id="path.test.classes">
		<fileset dir="${dir.test.src}">
			<include name="**/*Test*.java"/>
		</fileset>
	</path>

	<target name="compile-tests" depends="init">
		<javac srcdir="${dir.test.src}" destdir="${dir.build}" includeantruntime="false">
			<classpath refid="path.test"/>
		</javac>
	</target>

	<target name="test" depends="compile, compile-tests">
		<junit fork="yes" haltonfailure="no">
			<formatter type="plain" usefile="false" />
			<classpath refid="path.test" />
			<batchtest fork="yes">
				<path refid="path.test.classes"/>
			</batchtest>
		</junit>
	</target>

	<target name="report" depends="compile, compile-tests">
		<junit fork="yes" printsummary="no" haltonfailure="no">
			<batchtest fork="yes" todir="${dir.test.reports}" >
				<path refid="path.test.classes" />
			</batchtest>
			<formatter type="xml" />
			<classpath refid="path.test" />
		</junit>
		<junitreport todir="${dir.test.reports}">
			<fileset dir="${dir.test.reports}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${dir.test.reports}" />
		</junitreport>
	</target>
</project>